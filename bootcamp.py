# -*- coding: utf-8 -*-
"""Bootcamp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q9Bs2prPqzdjOWcNwuY5QeLOrl0r_50L
"""

# Load and preprocess the MNIST dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

# Import necessary libraries
import tensorflow as tf
from keras import layers, models
from keras.datasets import mnist
from keras.utils import to_categorical

# One-hot encode the labels
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# Build the neural network model
model = models.Sequential()
model.add(layers.Flatten(input_shape=(28, 28)))  # Flatten the 28x28 input images
model.add(layers.Dense(units =128, activation='relu'))   # Dense hidden layer with ReLU activation
model.add(layers.Dropout(0.2))                    # Dropout layer to reduce overfitting
model.add(layers.Dense(units = 10, activation='softmax')) # Output layer with 10 units (for 10 digits)

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels , epochs=5, validation_split=0.2)

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f'Test accuracy: {test_acc}')

# Save the trained model for future use
model.save('mnist_model.h5')

import numpy as np
import matplotlib.pyplot as plt

# Load the trained model
model = tf.keras.models.load_model('mnist_model.h5')

# Load the MNIST dataset
(_, _), (test_images, test_labels) = mnist.load_data()

# Select a random index
random_index = np.random.randint(0, test_images.shape[0])

# Get the image and label
image = test_images[random_index]
label = test_labels[random_index]

# Reshape the image to match the model's expected input shape
input_image = np.expand_dims(image, axis=0)

# Normalise pixel values to be between 0 and 1
input_image = input_image / 255.0

# Display the orignial and normalised images
plt.figure(figsize=(8,4))
plt.subplot(1, 2, 1)
plt.imshow(image, cmap='gray')
plt.title(f"Original Image\nTrue Label: {label}")

# Make a prediction using the model
predictions = model.predict(input_image)

# Get the predicted label
predicted_label = np.argmax(predictions)

# Display the normalized image and prediction
plt.subplot(1, 2, 2)
plt.imshow(input_image[0], cmap='gray')
plt.title(f"Normalized Image\nPredicted Label: {predicted_label}\nTrue Label: {label}")

plt.show()